//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/GameInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputAction"",
    ""maps"": [
        {
            ""name"": ""City Mode"",
            ""id"": ""80355399-78bb-4b03-ace9-b71a2893c09c"",
            ""actions"": [
                {
                    ""name"": ""Open Console"",
                    ""type"": ""Button"",
                    ""id"": ""8a6e27ce-4338-425c-afe6-ba974d5d4fb6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Menu"",
                    ""type"": ""Button"",
                    ""id"": ""0e361c9d-649a-43fb-bec4-48fbd590a969"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b011b480-ea26-4302-9f9d-506aaa268fed"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open Console"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f2d25d1-ccc2-4f65-b015-3d3c5c122f02"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Console"",
            ""id"": ""9fad337c-a4c2-41fd-9712-6709353147bc"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""5b79560e-3f38-43b7-8b71-d6d789e8e719"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""37dc6b2b-7186-4d72-a398-f43dcaf9b01c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousCommand"",
                    ""type"": ""Button"",
                    ""id"": ""34122df6-2979-4312-9063-a9a6cf4b1973"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextCommand"",
                    ""type"": ""Button"",
                    ""id"": ""0b900eba-81a4-4029-9428-a749dbb98413"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38b8615c-4bf4-46c9-9283-e997f114aa0d"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1d3994f-b6c6-4bc6-9b6a-cb557ec94990"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a6f727a-f8b7-40e8-aa31-585335af8926"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c9ff6a7-feca-45f5-abe0-5750e2ec764a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae16e356-d52f-4ffd-b372-ab9d7cdbdcd6"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""City Mode Menu"",
            ""id"": ""fa3f3b64-c717-4010-853d-bcffb76189d0"",
            ""actions"": [
                {
                    ""name"": ""Close Menu"",
                    ""type"": ""Button"",
                    ""id"": ""f200243a-0508-4313-997c-34acbb19bbd4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30703df3-fa91-45d3-949b-6baa5b1894d9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // City Mode
        m_CityMode = asset.FindActionMap("City Mode", throwIfNotFound: true);
        m_CityMode_OpenConsole = m_CityMode.FindAction("Open Console", throwIfNotFound: true);
        m_CityMode_OpenMenu = m_CityMode.FindAction("Open Menu", throwIfNotFound: true);
        // Console
        m_Console = asset.FindActionMap("Console", throwIfNotFound: true);
        m_Console_Close = m_Console.FindAction("Close", throwIfNotFound: true);
        m_Console_Submit = m_Console.FindAction("Submit", throwIfNotFound: true);
        m_Console_PreviousCommand = m_Console.FindAction("PreviousCommand", throwIfNotFound: true);
        m_Console_NextCommand = m_Console.FindAction("NextCommand", throwIfNotFound: true);
        // City Mode Menu
        m_CityModeMenu = asset.FindActionMap("City Mode Menu", throwIfNotFound: true);
        m_CityModeMenu_CloseMenu = m_CityModeMenu.FindAction("Close Menu", throwIfNotFound: true);
    }

    ~@GameInputAction()
    {
        UnityEngine.Debug.Assert(!m_CityMode.enabled, "This will cause a leak and performance issues, GameInputAction.CityMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Console.enabled, "This will cause a leak and performance issues, GameInputAction.Console.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_CityModeMenu.enabled, "This will cause a leak and performance issues, GameInputAction.CityModeMenu.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // City Mode
    private readonly InputActionMap m_CityMode;
    private List<ICityModeActions> m_CityModeActionsCallbackInterfaces = new List<ICityModeActions>();
    private readonly InputAction m_CityMode_OpenConsole;
    private readonly InputAction m_CityMode_OpenMenu;
    public struct CityModeActions
    {
        private @GameInputAction m_Wrapper;
        public CityModeActions(@GameInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenConsole => m_Wrapper.m_CityMode_OpenConsole;
        public InputAction @OpenMenu => m_Wrapper.m_CityMode_OpenMenu;
        public InputActionMap Get() { return m_Wrapper.m_CityMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CityModeActions set) { return set.Get(); }
        public void AddCallbacks(ICityModeActions instance)
        {
            if (instance == null || m_Wrapper.m_CityModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CityModeActionsCallbackInterfaces.Add(instance);
            @OpenConsole.started += instance.OnOpenConsole;
            @OpenConsole.performed += instance.OnOpenConsole;
            @OpenConsole.canceled += instance.OnOpenConsole;
            @OpenMenu.started += instance.OnOpenMenu;
            @OpenMenu.performed += instance.OnOpenMenu;
            @OpenMenu.canceled += instance.OnOpenMenu;
        }

        private void UnregisterCallbacks(ICityModeActions instance)
        {
            @OpenConsole.started -= instance.OnOpenConsole;
            @OpenConsole.performed -= instance.OnOpenConsole;
            @OpenConsole.canceled -= instance.OnOpenConsole;
            @OpenMenu.started -= instance.OnOpenMenu;
            @OpenMenu.performed -= instance.OnOpenMenu;
            @OpenMenu.canceled -= instance.OnOpenMenu;
        }

        public void RemoveCallbacks(ICityModeActions instance)
        {
            if (m_Wrapper.m_CityModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICityModeActions instance)
        {
            foreach (var item in m_Wrapper.m_CityModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CityModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CityModeActions @CityMode => new CityModeActions(this);

    // Console
    private readonly InputActionMap m_Console;
    private List<IConsoleActions> m_ConsoleActionsCallbackInterfaces = new List<IConsoleActions>();
    private readonly InputAction m_Console_Close;
    private readonly InputAction m_Console_Submit;
    private readonly InputAction m_Console_PreviousCommand;
    private readonly InputAction m_Console_NextCommand;
    public struct ConsoleActions
    {
        private @GameInputAction m_Wrapper;
        public ConsoleActions(@GameInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_Console_Close;
        public InputAction @Submit => m_Wrapper.m_Console_Submit;
        public InputAction @PreviousCommand => m_Wrapper.m_Console_PreviousCommand;
        public InputAction @NextCommand => m_Wrapper.m_Console_NextCommand;
        public InputActionMap Get() { return m_Wrapper.m_Console; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConsoleActions set) { return set.Get(); }
        public void AddCallbacks(IConsoleActions instance)
        {
            if (instance == null || m_Wrapper.m_ConsoleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ConsoleActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @PreviousCommand.started += instance.OnPreviousCommand;
            @PreviousCommand.performed += instance.OnPreviousCommand;
            @PreviousCommand.canceled += instance.OnPreviousCommand;
            @NextCommand.started += instance.OnNextCommand;
            @NextCommand.performed += instance.OnNextCommand;
            @NextCommand.canceled += instance.OnNextCommand;
        }

        private void UnregisterCallbacks(IConsoleActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @PreviousCommand.started -= instance.OnPreviousCommand;
            @PreviousCommand.performed -= instance.OnPreviousCommand;
            @PreviousCommand.canceled -= instance.OnPreviousCommand;
            @NextCommand.started -= instance.OnNextCommand;
            @NextCommand.performed -= instance.OnNextCommand;
            @NextCommand.canceled -= instance.OnNextCommand;
        }

        public void RemoveCallbacks(IConsoleActions instance)
        {
            if (m_Wrapper.m_ConsoleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IConsoleActions instance)
        {
            foreach (var item in m_Wrapper.m_ConsoleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ConsoleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ConsoleActions @Console => new ConsoleActions(this);

    // City Mode Menu
    private readonly InputActionMap m_CityModeMenu;
    private List<ICityModeMenuActions> m_CityModeMenuActionsCallbackInterfaces = new List<ICityModeMenuActions>();
    private readonly InputAction m_CityModeMenu_CloseMenu;
    public struct CityModeMenuActions
    {
        private @GameInputAction m_Wrapper;
        public CityModeMenuActions(@GameInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseMenu => m_Wrapper.m_CityModeMenu_CloseMenu;
        public InputActionMap Get() { return m_Wrapper.m_CityModeMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CityModeMenuActions set) { return set.Get(); }
        public void AddCallbacks(ICityModeMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_CityModeMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CityModeMenuActionsCallbackInterfaces.Add(instance);
            @CloseMenu.started += instance.OnCloseMenu;
            @CloseMenu.performed += instance.OnCloseMenu;
            @CloseMenu.canceled += instance.OnCloseMenu;
        }

        private void UnregisterCallbacks(ICityModeMenuActions instance)
        {
            @CloseMenu.started -= instance.OnCloseMenu;
            @CloseMenu.performed -= instance.OnCloseMenu;
            @CloseMenu.canceled -= instance.OnCloseMenu;
        }

        public void RemoveCallbacks(ICityModeMenuActions instance)
        {
            if (m_Wrapper.m_CityModeMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICityModeMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_CityModeMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CityModeMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CityModeMenuActions @CityModeMenu => new CityModeMenuActions(this);
    public interface ICityModeActions
    {
        void OnOpenConsole(InputAction.CallbackContext context);
        void OnOpenMenu(InputAction.CallbackContext context);
    }
    public interface IConsoleActions
    {
        void OnClose(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnPreviousCommand(InputAction.CallbackContext context);
        void OnNextCommand(InputAction.CallbackContext context);
    }
    public interface ICityModeMenuActions
    {
        void OnCloseMenu(InputAction.CallbackContext context);
    }
}
